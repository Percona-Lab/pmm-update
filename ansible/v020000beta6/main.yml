# v2.0.0-beta6
---
- hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: PMM                        | Clean YUM cache
      command: /usr/bin/yum --enablerepo=pmm clean all
      changed_when: False

    - name: PMM                        | Backup unmanaged configs
      copy: src={{ item.src }} dest={{ item.dest }}
      with_items:
        - { src: '/etc/grafana/grafana.ini',       dest: '/srv/update/grafana-backup' }

    - name: Data partition             | Create a file for changing partitions
      when: ansible_lvm is defined
      copy:
        content: |
          #!/bin/sh

          set -o errexit

          /usr/sbin/pvresize $(/usr/bin/ls /dev/sda /dev/sdb /dev/sdc /dev/xvdb /dev/nvme1n1 2>/dev/null | /usr/bin/grep -v ^$(/usr/sbin/pvdisplay -c | /usr/bin/grep ':VolGroup00:' | /usr/bin/cut -d ':' -f 1 | /usr/bin/tr -d '[:space:]' | /usr/bin/sed 's/[0-9]$//')$ | /usr/bin/grep -v ^$(/usr/bin/findmnt -f -n -o SOURCE / | /usr/bin/sed 's/[0-9]$//')$ | /usr/bin/grep -v ^$(/usr/bin/findmnt -f -n -o SOURCE /mnt/resource | /usr/bin/sed 's/[0-9]$//')$)
          /usr/sbin/lvextend -l '1%VG' /dev/DataVG/ThinPool_tmeta
          /usr/sbin/lvextend -l '100%VG' /dev/DataVG/ThinPool
          /usr/sbin/lvextend -l '80%VG' /dev/DataVG/DataLV
          /usr/sbin/xfs_growfs -d /srv
        dest: /var/lib/cloud/scripts/per-boot/resize-xfs
        force: yes
        mode: 0755

    - stat: path=/var/lib/cloud/scripts/per-boot/resize-xfs
      register: resizeXfs

    - name: Cron tasks                 | Add partition resize task to cron
      when: resizeXfs.stat.exists == True
      cron:
        name: "resize data partition"
        minute: "*/5"
        user: root
        job: "/var/lib/cloud/scripts/per-boot/resize-xfs"
        cron_file: resizeXfs

    - name: PMM                        | Update pmm-server RPM
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=present enablerepo=pmm
      with_items:
        - pmm-server-2.0.0
      register: pmm_server_update
      failed_when: "pmm_server_update | failed and 'Error in PREUN scriptlet in rpm package pmm-server' not in pmm_server_update.msg"

    - name: PMM                        | Install RPMs
      when: ansible_os_family == 'RedHat'
      yum: name={{ item }} state=latest enablerepo=pmm
      with_items:
        - pmm-update
        - percona-toolkit-3.0.10
        - percona-dashboards-2.0.0
        - pmm-server-2.0.0
        - pmm2-client-2.0.0
        - percona-prometheus-2.10.0
        - percona-qan-api2-2.0.0
        - percona-grafana-6.2.5
        - percona-qan-app-2.0.0
        - pmm-manage-2.0.0
        - pmm-managed-2.0.0
        - rds_exporter-2.0.0
        - percona-clickhouse-server-19.7.5.27

    - name: PMM                        | Restore unmanaged configs
      copy: src={{ item.src }} dest={{ item.dest }}
      with_items:
        - { src: '/srv/update/grafana-backup',                dest: '/etc/grafana/grafana.ini' }

    - name: PMM                        | Remove temporary files
      command: /usr/bin/shred --remove /srv/update/grafana-backup

    - name: PMM                        | Update entrypoint.sh
      copy: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }}
      with_items:
        - { src: '/usr/share/pmm-server/entrypoint.sh', dest: '/opt/entrypoint.sh', mode: 'u=rwx,g=rx,o=rx' }

    - name: PMM                        | Update supervisord config
      when: image_creation is not defined
      command: /usr/bin/env UPDATE_MODE=1 ENABLE_DEBUG=1 /opt/entrypoint.sh

    - name: PMM                        | Restore configuration
      command: bash -c "/usr/bin/pmm-configure -listen-address=127.0.0.1:7778 -grafana-db-path $(ls /srv/grafana/grafana.db /var/lib/grafana/grafana.db 2>/dev/null)"

    - name: NGINX                      | Disable daemon
      lineinfile:
        dest: /etc/nginx/nginx.conf
        line: 'daemon off;'

    - name: Security                   | Stat sshd_config
      stat: path=/etc/ssh/sshd_config
      register: sshd_config

    - name: Security                   | Disable root SSH access
      when: sshd_config.stat.exists
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin no'
        state: present

    - name: Security                   | Remove percona key
      lineinfile:
        dest: /root/.ssh/authorized_keys
        regexp: '([Pp]acker|[Mm]ykola|[Pp]ercona)'
        state: absent

    - name: Security                   | Remove centos user
      when: keep_centos_user is not defined
      user:
        name: centos
        state: absent
        remove: yes

    - name: Grafana                    | Set snapshot server
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_enabled
        value: true

    - name: Grafana                    | Set snapshot server
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_url
        value: https://snapshots-g504.percona.com

    - name: Grafana                    | Set snapshot server
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: snapshots
        option: external_snapshot_name
        value: Share with Percona

    - name: Grafana                    | Enable gzip
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: server
        option: enable_gzip
        value: true

    - name: Grafana                    | Enable Anonymous access
      ini_file:
        dest: /etc/grafana/grafana.ini
        section: auth.anonymous
        option: org_role
        value: Editor

    - name: PMM                        | Reload config (supervisord)
      command: /usr/bin/supervisorctl update

    - name: PMM                        | Restart services (supervisord)
      command: /usr/bin/supervisorctl restart {{ item }}
      with_items:
        - prometheus
        - node_exporter
        - qan-api2
        - grafana
        - pmm-managed
        - clickhouse

    - name: PMM                        | Import dashboards
      command: bash -c "/usr/share/percona-dashboards/import-dashboards.py $(dirname $(ls /srv/grafana/grafana.db /var/lib/grafana/grafana.db 2>/dev/null))"
      register: import_result
      changed_when: "'up-to-date' not in import_result.stdout"

    - name: PMM                        | Restart pmm-manage daemon (delayed)
      shell: cd /tmp; nohup sh -c 'sleep 10; test -e /usr/bin/supervisorctl && /usr/bin/supervisorctl restart pmm-manage nginx || (/usr/sbin/nginx -s reload; /bin/systemctl restart pmm-manage)' </dev/null >/dev/null 2>&1 &
